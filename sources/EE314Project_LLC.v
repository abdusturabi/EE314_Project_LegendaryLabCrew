
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module EE314Project_LLC(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire game_clk; // Game clock signal
wire vga_clk; // VGA clock signal
wire [9:0] next_x;
wire [9:0] next_y;
wire [7:0] pixel_color; // Pixel color for VGA output RRRGGGBB

wire [3:0] char1_state; // Character 1 : State
wire [9:0] char1_x_pos; // Character 1 : X position
wire [9:0] char1_y_pos; // Character 1 : Y position
wire button1_flag; // Button flag for character movement
wire [1:0] char1_frame_state; // Frame state for character 1
wire [4:0] char1_load_frame; // Load frame for character 1
wire [4:0] char1_frame_counter; // Frame counter for character 1
wire char1_block_flag; // Block flag for character 1
wire [2:0] char1_block;
wire [2:0] char1_health; // Health for character 1

// Character 2 : State, X position, Y position
wire [3:0] char2_state; // Character 2 : State
wire [9:0] char2_x_pos; // Character 2 : X position
wire [9:0] char2_y_pos; // Character 2 : Y position
wire button2_flag; // Button flag for character movement
wire [1:0] char2_frame_state; // Frame state for character 2
wire [4:0] char2_load_frame; // Load frame for character 2
wire [4:0] char2_frame_counter; // Frame counter for character 2
wire char2_block_flag; // Block flag for character 2
wire [2:0] char2_block;
wire [2:0] char2_health; // Health for character 2
wire char2_key_left; // Left key for character 2
wire char2_key_right; // Right key for character 2
wire char2_key_attack; // Attack key for character 2


// Wires for game controller
wire [2:0] game_state; // Game state
wire [3:0] fight_state; // Fight state
wire menu_active; // Menu active flag
wire mode_selected;
wire collision_flag; // Collision flag
wire input_active;

//=======================================================
//  Structural coding
//=======================================================
game_clock_generator game_clk_gen_inst (
	.clk_50mhz(CLOCK_50),
	.switch(SW[1]),
	.step_btn(~KEY[0]),
	.game_clk(game_clk),
	.vga_clk(vga_clk)
);
char_state_handler char1_state_handler_inst (
	.KEY_LEFT(~KEY[3]), //~KEY[3] is left key
	.KEY_RIGHT(~KEY[1]),
	.KEY_ATTACK(~KEY[2]),
	.CLOCK(game_clk),
	.STATE(char1_state),
	.button_flag(button1_flag),
	.char_no(1'b0), // Character 1
	.load_frame(char1_load_frame),
	.enable(input_active),
	.FrameCounter(char1_frame_counter),
	.block_flag(char1_block_flag),
	.load_frame_led(), // Load frame LED output
);

char_state_handler char2_state_handler_inst (
	.KEY_LEFT(char2_key_left), 
	.KEY_RIGHT(char2_key_right), 
	.KEY_ATTACK(char2_key_attack), 
	.CLOCK(game_clk),
	.STATE(char2_state),
	.state_led(LEDR[6:3]), // State LED output
	.button_flag(button2_flag),
	.char_no(1'b1), // Character 2
	.load_frame(char2_load_frame),
	.load_frame_led(), // Load frame LED output
	.enable(input_active),
	.FrameCounter(char2_frame_counter),
	.block_flag(char2_block_flag),
);

char_input_handler char2_input_handler_inst (
	.clk_game(game_clk),
	.reset((SW[9] | menu_active)),
	.p1_input_valid(~KEY[3] | ~KEY[1] | ~KEY[2]), // Player 1 input valid
	.char_left(), //GPIO EKLENECEK
	.char_right(), //GPIO EKLENECEK
	.char_attack(), //GPIO EKLENECEK
	.game_mode(mode_selected), // Game mode switch (0 = Player, 1 = Bot)
	.char_out_left(char2_key_left), // Output for character 2 left movement
	.char_out_right(char2_key_right), // Output for character 2 right movement
	.char_out_attack(char2_key_attack) // Output for character 2 attack
);

char_pos_handler char1_pos_handler_inst (
	.clk(game_clk),
	.rst((SW[9] | menu_active)),
	.state(char1_state),
	.collision_flag(collision_flag),
	.char_x(char1_x_pos), 
	.char_y(char1_y_pos),
	.button_flag(button1_flag),
	.char_no(1'b0) // Character 1
);

char_pos_handler #(.INIT_X(10'd432)) char2_pos_handler_inst (
	.clk(game_clk),
	.rst((SW[9] | menu_active)),
	.state(char2_state),
	.collision_flag(collision_flag),
	.char_x(char2_x_pos), 
	.char_y(char2_y_pos),
	.button_flag(button2_flag),
	.char_no(1'b1) // Character 2
);

collision_checker collision_checker_inst (
	.clk(game_clk),
	.char1_pos_x(char1_x_pos),
	.char1_pos_y(char1_y_pos),
	.char1_state(char1_state),
	.char1_block_flag(char1_block_flag & char1_block[0]),

	.char2_pos_x(char2_x_pos),
	.char2_pos_y(char2_y_pos),
	.char2_state(char2_state),
	.char2_block_flag(char2_block_flag & char2_block[0]),

	.collision_flag(collision_flag),

	.char1_frame_state(char1_frame_state),
	.char2_frame_state(char2_frame_state)
);

game_controller game_controller_inst (
	.clk(game_clk),
	.clk_pref(SW[1]),
	.rst(SW[9]),
	.start_btn((~KEY[1] & ~KEY[2] & ~KEY[3])),
	.mode_switch(SW[0]),
	.game_state(game_state),

	.char1_x_pos(char1_x_pos),
	.char1_y_pos(char1_y_pos),
	.char1_state(char1_state),
	.char1_frame_state(char1_frame_state),
	.char1_load_frame(char1_load_frame),
	.char1_frameCounter(char1_frame_counter),

	.char2_x_pos(char2_x_pos),
	.char2_y_pos(char2_y_pos),
	.char2_state(char2_state),
	.char2_frame_state(char2_frame_state),
	.char2_load_frame(char2_load_frame),
	.char2_frameCounter(char2_frame_counter),

	.char1_health(char1_health),
	.char1_health_led(LEDR[9:7]),
	.char1_block(char1_block),
	.char2_health(char2_health),
	.char2_health_led(LEDR[2:0]),
	.char2_block(char2_block),

	.fight_state(fight_state),
	.input_active(input_active),
	.menu_active(menu_active),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.mode_selected(mode_selected)
);

vga_handler vga_handler_inst (
	.vga_clk(vga_clk),
	.x(next_x),
	.y(next_y), 
	// Character 1 
	.char1_x_pos(char1_x_pos),
	.char1_y_pos(char1_y_pos),
	.char1_state(char1_state),
	.char1_health(char1_health),
	.char1_block(char1_block),
	// Character 2
	.char2_x_pos(char2_x_pos),
	.char2_y_pos(char2_y_pos),
	.char2_state(char2_state),
	.char2_health(char2_health),
	.char2_block(char2_block),
	.game_state(game_state),
	.pixel_color(pixel_color) // Output pixel color to VGA Red channel
);

vga_driver vga_driver_inst (
	.clock(vga_clk),
	.reset(SW[9]), // Reset signal from KEY[0]
	.color_in(pixel_color), // Pixel color input
	.next_x(next_x), // Next x coordinate for VGA
	.next_y(next_y), // Next y coordinate for VGA
	.hsync(VGA_HS), // HSYNC output
	.vsync(VGA_VS), // VSYNC output
	.red(VGA_R), // Red channel output
	.green(VGA_G), // Green channel output
	.blue(VGA_B), // Blue channel output
	.sync(VGA_SYNC_N), // Sync output
	.clk(VGA_CLK), // Clock output
	.blank(VGA_BLANK_N) // Blank signal output
);


endmodule
