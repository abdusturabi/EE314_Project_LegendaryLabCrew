
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module EE314Project_LLC(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire game_clk; // Game clock signal
wire vga_clk; // VGA clock signal
wire [9:0] next_x;
wire [9:0] next_y;
wire [7:0] pixel_color; // Pixel color for VGA output RRRGGGBB

wire [3:0] char1_state; // Character 1 : State
wire [9:0] char1_x_pos; // Character 1 : X position
wire [9:0] char1_y_pos; // Character 1 : Y position
wire button_flag; // Button flag for character movement

//=======================================================
//  Structural coding
//=======================================================
game_clock_generator game_clk_gen_inst (
	.clk_50mhz(CLOCK_50),
	.switch(SW[1]),
	.step_btn(~KEY[0]),
	.game_clk(game_clk),
	.vga_clk(vga_clk)
);
char_state_handler char_state_handler_inst (
	.KEY_LEFT(~KEY[3]),
	.KEY_RIGHT(~KEY[1]),
	.KEY_ATTACK(~KEY[2]),
	.CLOCK(game_clk),
	.STATE(char1_state),
	.frame_test(LEDR[4:0]), // For testing purposes
	.button_flag(button_flag)
);
char_pos_handler char1_pos_handler_inst (
	.clk(game_clk),
	.state(char1_state),
	.char_x(char1_x_pos), 
	.char_y(char1_y_pos),
	.button_flag(button_flag)
);
vga_handler vga_handler_inst (
	.vga_clk(vga_clk),
	.x(next_x), // Replace with actual x coordinate logic
	.y(next_y), // Replace with actual y coordinate logic
	.char_x_pos(char1_x_pos),
	.char_y_pos(char1_y_pos),
	.char_state(char1_state),
	.pixel_color(pixel_color) // Output pixel color to VGA Red channel
);

vga_driver vga_driver_inst (
	.clock(vga_clk),
	.reset(SW[9]), // Reset signal from KEY[0]
	.color_in(pixel_color), // Pixel color input
	.next_x(next_x), // Next x coordinate for VGA
	.next_y(next_y), // Next y coordinate for VGA
	.hsync(VGA_HS), // HSYNC output
	.vsync(VGA_VS), // VSYNC output
	.red(VGA_R), // Red channel output
	.green(VGA_G), // Green channel output
	.blue(VGA_B), // Blue channel output
	.sync(VGA_SYNC_N), // Sync output
	.clk(VGA_CLK), // Clock output
	.blank(VGA_BLANK_N) // Blank signal output
);


endmodule
